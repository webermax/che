#
# Copyright (c) 2012-2016 Codenvy, S.A.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#   Codenvy, S.A. - initial API and implementation
#

# range of available service ports
#sys.resources.min_port=49152
#sys.resources.max_port=65535

### Storage and user configuration
# The location where your workspaces (and their projects) are stored.
# This property is ignored on Windows due to limitations with VirtualBox
# On Windows, all workspaces stored in c:\%userprofile%\AppData\Local\Eclipse Che\
che.user.workspaces.storage=${che.home}/workspaces

# Your projects are synchronized from the Che server into the machine running each
# workspace. This is the directory in the machine where your projects are placed.
che.machine.projects.internal.storage=/projects

# Che stores various internal data objects as JSON on the file system.
che.conf.storage=${catalina.base}/temp/local-storage

# The dashboard uses this to manage direction of requests to the IDE
# Generally, do not modify.
che.ide.context=ide

### Configuration of embedded templates and samples
# Folder that contains JSON files with code templates and samples
project.template_location_dir=${che.home}/templates

# Folder that contains source code for templates, if you do not want to clone from URL.
project.template_descriptions_dir=${che.home}/templates


### oAuth configuration. You can setup GitHub oAuth to automate authentication to remote
### repositories. You need to first register this application with GitHub oAuth.
# GitHub application client ID
oauth.github.clientid=***
oauth.github.clientsecret=***
oauth.github.authuri= https://github.com/login/oauth/authorize
oauth.github.tokenuri= https://github.com/login/oauth/access_token
oauth.github.redirecturis= http://localhost:${SERVER_PORT}/ide/api/oauth/callback
auth.oauth.access_denied_error_page=/error-oauth

# Activates user self-service at the API level.
# Che has a single identity implementation, so this does not change the user experience.
# If true, enables user creation at API level
user.self.creation.allowed=false

# Remove locations where internal message bus events should be propagated to.
# For debugging - set to retrieve internal events from external clients.
notification.server.propagate_events=

# Che extensions can be scheduled executions on a time basis. 
# This configures the size of the thread pool allocated to extensions that are launched on
# a recurring schedule.
schedule.core_pool_size=10

### Docker is the default machine implementation within Che. Workspaces are powered by machines
### that are constructed when the workspace is started. The images used to generate containers
### for the machines can come from DockerHub or a private Docker registry.
machine.docker.registry=${CHE_REGISTRY_HOST}:5000
docker.registry.auth.url=http://${CHE_REGISTRY_HOST}:5000
docker.registry.auth.username=user1
docker.registry.auth.password=pass
docker.registry.auth.email=user1@email.com
docker.connection.tcp.connection_timeout_ms=600000
docker.connection.tcp.read_timeout_ms=600000

### Machine configuration.  Machines power workspaces. This configures the Che behaviors that
### occur within the machine.

# This archive contains the server to run the workspace agent and any custom extensions.
# Che injects this archive into machines when they are booted or started.
machine.server.ext.archive=${che.home}/lib/ws-agent.zip

# The location of the Web Socket terminal used within the browser.
# This is copied into the machine and run from within it.
machine.server.terminal.archive=${che.home}/lib/terminal

# The machine's log files are stored here
machine.logs.location=${che.logs.dir}/machine/logs

# Size of the machine by default.  What is used if RAM parameter not provided by user or API.
machine.default_mem_size_mb=1024
machine.supported_docker_version=1.6.0,1.6.1,1.6.2,1.7.1,1.8.1

# When the workspace master launches a new workspace, Che performs checks of the internal Web 
# services. When Che gets a valid response, we know that the workspace agent is ready for use.
machine.ws_agent.max_start_time_ms=60000
machine.ws_agent.ping_delay_ms=2000
machine.ws_agent.ping_conn_timeout_ms=2000

# Hosts listed here will be added to /etc/hosts of each workspace machine.
# Add an entry here if you write a ws-agent extension that needs to communicate outside the machine
machine.docker.machine_extra_hosts=NULL

# This is the API endpoint of the workspace master running within the core Che server.
# This tells the workspace agent how to connect back to the Che server.
# che-host is a fake DNS hostname that Che creates for itself.
machine.docker.che_api.endpoint=http://che-host:8080/ide/api

# If this is true, then we always pull an image from a registry even if we have an image cached
# locally. If false, Docker only pulls image if it does not exist locally.
machine.docker.pull_image=true

# OpenShift configuration
openshift.api.endpoint=https://api.codenvy.openshift.com
oauth.openshift.authuri=https://api.codenvy.openshift.com/oauth/authorize
oauth.openshift.tokenuri=https://api.codenvy.openshift.com/oauth/token
oauth.openshift.clientid=***
oauth.openshift.clientsecret=***
oauth.openshift.redirecturis=http://localhost:${SERVER_PORT}/che/api/oauth/callback

# If the browser clients that are accessing Che are remote AND the configuraiton of Docker is an 
# internal IP address or using Unix sockets, then remote browser clients will not be able to connect
# to the workspace. Set the Docker configuration so that Docker containers have an external IP 
# address and provide this host or IP address here.
machine.docker.local_node_host=NULL

# URL path to api service.  
# Browser clients use this to initiate REST communiations with workspace master
api.endpoint=http://localhost:${SERVER_PORT}/ide/api

#### Everrest is a Java Web Services toolkit that manages JAX-RS & web socket communications
#### Users should rarely need to configure this.
# Disable asynchronous mechanism that is embedded in everrest.
org.everrest.asynchronous=false
# Quantity of asynchronous requests which may be processed at the same time
org.everrest.asynchronous.pool.size=20
# Size of queue. If asynchronous request can't be processed after consuming it will be added in queue.
org.everrest.asynchronous.queue.size=500
# Timeout in minutes for request. If after timeout request is not done or client did not come yet to get result of request it may be discarded.
org.everrest.asynchronous.job.timeout=10
# Size of cache for waiting, running and ended request.
org.everrest.asynchronous.cache.size=1024
# Path to asynchronous service
org.everrest.asynchronous.service.path=/async/
